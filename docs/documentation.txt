Documentação: projeto Good Luck, aplicativo com jogos de sorte.

Back-end:
    Será responsável pela criação e autenticação dos usuários, bem como atualizaçãos dos créditos dos usuários na plataforma

    Rotas:

        /register => POST:
            será uma rota para cadastro de usuários na plataforma, deverá ter regras como:

                - para cadastro, o usuário deverá passar { email, name, password, confirmationPassword };
                    - se não receber todos os dados [400] BAD_REQUEST "Todos os dados são obrigatórios."
                - verificar se e-mail já está sendo utilizando:
                    - se sim, [400] BAD_REQUEST "Usuário já cadastrado"
                    - se não, passe para a próxima etapa.
                - verificar se é um e-mail valido:
                    - se não, [400] BAD_REQUEST "E-mail inválido."
                    - se sim, passe para a próxima etapa.
                - verificar se "password" é igual a "confirmationPassword":
                    - se não, [400] BAD_REQUEST "As senhas devem ser iguais"
                    - se sim, passe para a próxima etapa
                - (opcional) colocar uma verificação de email: "Uma letra maiúscula, mínimo 8 caractere etc"
                - salvar usuário no banco de dados, retornar id do usuário cadastrado no banco;
                - gerar token de acesso JWT, o token deverá ser gerado com base no id do usuário;
                - retornar [201] CREATED { email, name, credits e token de acesso };
                - caso ocorra um erro interno de servidor, como falha na conexão com o banco de dados:
                    - retorne [500] INTERNAL_ERROR "Houve um erro interno de servidor."

        /login => POST:
            será uma rota para login de usuários na plataforma, deverá ter regras como:

                - para entrar, o usuário deverá passar { email e password }
                    - se não receber todos os dados [400] BAD_REQUEST "Todos os dados são obrigatórios."
                - buscar usuário no banco de dados através do email:
                    - se não achar usuário, [400] BAD_REQUEST "Usuário não encontrado"
                    - se achar usuário passe para a próxima etapa.
                - verificar senha passada com senha criptograda no banco de dados:
                    - se não for iguais, [400] BAD_REQUEST "Credenciais inválidas."
                    - se for iguais, passe para a próxima etapa.
                - gerar token de acesso JWT, o token deverá ser gerado com base no id do usuário;
                - retornar: [200] OK { email, name, credits e token de acesso };
                - caso ocorra um erro interno de servidor, como falha na conexão com o banco de dados:
                    - retorne [500] INTERNAL_ERROR "Houve um erro interno de servidor."

        /update-credits => PATCH:
            será uma rota para atualizar os créditos do usuário, deverá ter regras como:

                - receber { id do usuário, valor a ser atualizado }
                    - se não receber todos os dados [400] BAD_REQUEST "Todos os dados são obrigatórios."
                - atualizar créditos do usuário:
                    - retorne: [200] OK { novo crédito atualizado }
                - caso ocorra um erro interno de servidor, como falha na conexão com o banco de dados:
                    - retorne [500] INTERNAL_ERROR "Houve um erro interno de servidor."
